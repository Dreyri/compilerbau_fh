PARSER_BEGIN(Parser)
import java.util.*;

public class Parser {
    public static SymTable symTable = new SymTable();

    public static void main(String[] args)
    {
        try {
	    Parser parser = new Parser(new java.io.FileReader(args[0]));
            parser.program();
            System.out.println(symTable);
	}
	catch(Throwable e)
	{
	    System.out.println("Syntax error: " + e.getMessage());
	}
    }
}

enum Tag {
    CONST,
    VAR
}

class MultipleDefinitionException extends Exception {
    public MultipleDefinitionException(String errorMessage) {
         super(errorMessage);
    }
}

class NotDefinedException extends Exception {
    public NotDefinedException(String errorMessage) {
         super(errorMessage);
    }
}


class Symbol {
    String value;
    Tag tag;
  
    Symbol(String val, Tag t) {
        value = val;
        tag = t;
    }

    public String getVal() {
        return value;
    }

    public String toString() {
        return "(" + value + ", " + tag + ")";
    }
}

class SymTable  {
    Hashtable<String, Symbol> symbols = new Hashtable<String, Symbol>();

    void addConstant(String id, String val) throws MultipleDefinitionException {
        if(symbols.containsKey(id))
            throw new MultipleDefinitionException("multiple definition of " + id);

        symbols.put(id, new Symbol(val, Tag.CONST));
    }

    void addVariable(String id, String val) throws MultipleDefinitionException {
        if(symbols.containsKey(id)) 
            throw new MultipleDefinitionException("multiple definition of " + id); 
        
        if(val == "")
            val = "0";

        symbols.put(id, new Symbol(val, Tag.VAR));
    }
  
    Symbol getSymbol(String id) throws NotDefinedException {
        if(!symbols.containsKey(id)) 
             throw new NotDefinedException("symbol " + id + " undefined");
       
         return symbols.get(id);
    }    

    public String toString() {
         return symbols.toString();
    } 
}

class Program {
    
}

PARSER_END(Parser)

SKIP: {
    " "
  | "\t"
  | "\r"
  | "\n"
}

TOKEN: {
  "(" | ")"
  | <OP_MUL_DIV: "*" | "/">
  | <OP_PLUS_MIN: "+" | "-">
  | <NUM: "0" | (["1"-"9"](["0"-"9"])*)>
  | <#DIGIT: ["0"-"9"]>
  | <#LLETTER: ["a"-"z"]>
  | <#ULETTER: ["A"-"Z"]>
  | <#LETTER: <LLETTER> | <ULETTER>>
  | <#ALPHANUM: <DIGIT> | <LETTER>>

  | <OP_COMP: "<" | ">" | "<=" | ">=" | "==" | "!=">
  | <OP_ASSIGN: "=">
  | <WHILE: "while">
  | <IF: "if">
  | <ELSE: "else">
  | <FINAL: "final">
  | <PRINT: "print">
  | <INT: "int">
  | <IDENT: <LLETTER> (<ALPHANUM>)*>
}



void program():
{}
{
    (constDecl())?
    (varDecl())?
    (expr())? <EOF>
}

void expr():
{}
{
    term() (sum())
}

void constDecl():
{}
{
    "final" "int" constAssign() (constList())? ";"
}

void constAssign():
{
   Token id = null;
   Token num = null;
}
{
   try {
       id = <IDENT> "=" num = <NUM> 
       {
           symTable.addConstant(id.image, num.image);      
       }
   } catch(MultipleDefinitionException e) {
       System.out.println(e);
       System.exit(0);
   }
}

void constList():
{}
{
    "," constAssign() (constList())?
}

void varDecl():
{
   String num = "";
   Token id = null;
}
{
   try {
       "int" id = <IDENT> (num = varAssign())?
       {
           symTable.addVariable(id.image, num);
       } (varList())? ";"
    }
    catch (MultipleDefinitionException e) {
        System.out.println(e);
        System.exit(0);
    }
}

String varAssign():
{
   Token num = null;
}
{
   "=" num = <NUM> 
   { 
      return num.image; 
   } 
}

void varList():
{
    String num = "";
    Token id = null;
}
{
    try {
        "," id = <IDENT> (num = varAssign())? 
        {
           symTable.addVariable(id.image, num);
        } (varList())?
    } catch (MultipleDefinitionException e) {
        System.out.println(e);
        System.exit(0);
    }
}

void statement():
{}
{
      (<IDENT> <OP_ASSIGN> expr() ";")
    | (<PRINT> "(" expr() ")" ";")
    | ("{" (statement())* "}")
    | (<IF> condition() statement() optElse())
    | (<WHILE> condition() statement())
}

void sum():
{}
{
    (<OP_PLUS_MIN> term() sum())?
}

void term():
{}
{
    factor() product()
}

void faktor():
{}
{
   <NUM> | <IDENT> | ("(" expr() ")")
}

void product():
{}
{
    (<OP_MUL_DIV> factor() product())
}

void factor():
{}
{
    <NUM> | <IDENT> | ("(" expr() ")")
}

void condition():
{}
{
    expr() <OP_COMP> expr()
}

void optElse():
{}
{
    (<ELSE> statement())?
}

