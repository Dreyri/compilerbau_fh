PARSER_BEGIN(Parser)

public class Parser {
    public static void main(String[] args)
    {
        try {
	    Expr res = new Parser(new java.io.StringReader(args[0])).S();
	    System.out.println(res);
	}
	catch(Throwable e)
	{
	    System.out.println("Syntax error: " + e.getMessage());
	}
    }
}

abstract class Expr {}
class Num extends Expr {
    int value;

    Num(int v) {value = v;}
    public String toString() { return value + ""; }
}

class BinaryExpr extends Expr {
    String op;
    Expr left, right;

    BinaryExpr(String o, Expr lhs, Expr rhs) {op = o; left = lhs; right = rhs; }
    public String toString() { return left.toString() + " " + right.toString() + " " + op; }
}

PARSER_END(Parser)

SKIP: {
    " "
  | "\t"
  | "\r"
  | "\n"
}

TOKEN: {
    "(" | ")" |
    <OP0: "*" | "/">
  | <OP1: "+" | "-">
  | <NUM: "0" | (["1"-"9"](["0"-"9"])*)>
}

Expr S():
{Expr e;}
{
    e=E() <EOF> {return e;}
}

Expr E():
{Expr e1; Expr e2; Token o;}
{
    e1=T() (o=<OP1> e2=T() {e1 = new BinaryExpr(o.image, e1, e2);})* {return e1;}
}

Expr T():
{Expr e1; Expr e2; Token o;}
{
    e1=F() (o=<OP0> e2=F() {e1 = new BinaryExpr(o.image, e1, e2);})* {return e1;}
}

Expr F():
{Expr e; Token n;}
{
    n=<NUM> {return new Num(Integer.parseInt(n.image));}
  | "(" e=E() ")" {return e;}
}
