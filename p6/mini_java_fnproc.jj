PARSER_BEGIN(Parser)
import java.util.*;

public class Parser {

	public static String toHexString(int b) {
		return String.format("%02X", b);		
	}

    public static String toBytecodeString(SymbolTable sym, ArrayList<Byte> bytecode) {
	String bcStr = "";
	
	for (int i = 0; i < bytecode.size(); ++i) {
	    byte op = bytecode.get(i);

	    if (op == (byte) 184) {
		byte upper = bytecode.get(++i);
		byte lower = bytecode.get(++i);
		short index = (short)((short)upper << 8 | (short)lower);
		String fnIdent = sym.lookupFunctionIdent((int) index);
		bcStr += ("b8 (" + fnIdent + ") ");
	    }
	    else {
		bcStr += toHexString(op & 0xFF) + " ";
	    }
	}

	return bcStr.toLowerCase();
    }

    public static void main(String[] args) throws Throwable
    {
        //try {
	SymbolTable sym = new SymbolTable();
	ArrayList<Parameter> printParams = new ArrayList<Parameter>();
	printParams.add(null);
	sym.addFunction(new Procedure("print", printParams, null));
	Program res = new Parser(new java.io.FileReader(args[0])).parse();
	res.addSymbols(sym);

	ArrayList<Byte> mainBytecode = res.compile(sym);
	String mainBcStr = toBytecodeString(sym, mainBytecode);

	Hashtable<String, ArrayList<Byte>> bytecodes = new Hashtable<String, ArrayList<Byte>>();
	ArrayList<MethodObject> methods = new ArrayList<MethodObject>();
	
	System.out.println("procedures:");
	for (Procedure p : res.procedures) {
	    System.out.println(p.identifier + ": " + p.numberOfArguments() + " args");
	    ArrayList<Byte> bytecode = p.compile(sym.getFunctionTable(p));
	    String bcStr = toBytecodeString(sym, bytecode);
	    System.out.println(bcStr);
	    bytecodes.put(p.identifier, bytecode);
	    methods.add(new MethodObject(p.identifier, p.numberOfArguments(), bcStr));
	}

	System.out.println("functions:");
	for (Function fn : res.functions) {
	    System.out.println(fn.identifier + ": " + fn.numberOfArguments() + " args");
	    ArrayList<Byte> bytecode = fn.compile(sym.getFunctionTable(fn));
	    String bcStr = toBytecodeString(sym, bytecode);
	    System.out.println(bcStr);
	    bytecodes.put(fn.identifier, bytecode);
	    methods.add(new MethodObject(fn.identifier, fn.numberOfArguments(), bcStr));
	}

	System.out.println("main:");
	MethodObject m = new MethodObject("main", 1, mainBcStr);

	System.out.println(mainBcStr);
	/*
	JavaClassFileGenerator classGen = new JavaClassFileGenerator("out", true, true, true);
	classGen.generateClassFile(m);
	*/
	/*
	  }
	  catch(Throwable e)
	  {
	  System.out.println("Syntax error: " + e.getMessage());
	  }
	*/
    }
}

class MultipleDefinitionException extends Exception {
	public MultipleDefinitionException(String symbol) {
		super(symbol + " was defined multiple times");
	}
}

class UndefinedException extends Exception {
	public UndefinedException(String symbol) {
		super(symbol + " is undefined");
	}
}

class LWertException extends Exception {
    public LWertException(String symbol) {
	super(symbol + " is not a variable, possibly const");
    }
}

class RWertException extends Exception {
    public RWertException(String symbol) {
	super(symbol + "must be one of: variable, constant, function");
    }
}

class WrongParametersException extends Exception {
    public WrongParametersException(int expected, int provided) {
	super("expected " + expected + " arguments, got " + provided);
    }
}

enum Mutability {
    CONST,
    VAR
}

enum Scope {
    GLOBAL,
    LOCAL
}

class Symbol {
    String identifier;
    int value;
    Mutability mut;
    Scope sc;
    int index;

    Symbol(String ident, int v, Mutability m, Scope s, int idx) {
	identifier = ident;
	value = v;
	mut = m;
	sc = s;
	index = idx;
    }

    ArrayList<Byte> loadInstructions() {
	ArrayList<Byte> codes = new ArrayList<Byte>();

	if (mut == Mutability.CONST) {
	    codes.add((byte)16); // bipush, 0x10
	    codes.add((byte)value);
	}
	else {
	    if (sc == Scope.GLOBAL) {
		codes.add((byte)178); // getstatic, 0xb2

		byte upper_byte = (byte)(index >> 8);
		byte lower_byte = (byte)(index & 0xFF);
		codes.add(upper_byte);
		codes.add(lower_byte);
	    }
	    else {
		// LOCAL scope
		codes.add((byte)21); // 0x15, iload
		codes.add((byte)index);
	    }
	}
	
	return codes;
    }

    ArrayList<Byte> storeInstructions() throws LWertException {
	ArrayList<Byte> codes = new ArrayList<Byte>();

	if (mut == Mutability.CONST) {
	    throw new LWertException(identifier);
	}
	else {
	    if (sc == Scope.GLOBAL) {
		codes.add((byte)179);

		byte upper_byte = (byte)(index >> 8);
		byte lower_byte = (byte)(index & 0xFF);
		codes.add(upper_byte);
		codes.add(lower_byte);
	    }
	    else {
		codes.add((byte)54);
		codes.add((byte)index);
	    }
	}

	return codes;
    }
}

interface ILookup {
    public Symbol lookup(String identifier) throws UndefinedException;
    public int lookupFunctionIndex(String ident, int numArgs) throws UndefinedException, WrongParametersException;
    public FunctionBase lookupFunction(int idx);
}

class FunctionSymbolTable implements ILookup {
    String functionName;
    SymbolTable globalSyms;

    Hashtable<String, Symbol> symbols = new Hashtable<String, Symbol>();
    int currentIndex;

    FunctionSymbolTable(SymbolTable sym, String name, int startIndex) {
	globalSyms = sym;
	functionName = name;
	currentIndex = startIndex;
    }

    public void checkMultipleDefinition(String id) throws MultipleDefinitionException
    {
	// check global symbols first, then fun/proc symbols
	globalSyms.checkMultipleDefinition(id);
	if (symbols.containsKey(id))
	    {
		throw new MultipleDefinitionException("redefinition of " + id);
	    }
    }

    void addConstant(String id, int value) throws MultipleDefinitionException {
	checkMultipleDefinition(id);
	symbols.put(id, new Symbol(id, value, Mutability.CONST, Scope.LOCAL, -1));
    }

    void addVariable(String id, int value) throws MultipleDefinitionException {
	checkMultipleDefinition(id);
	symbols.put(id, new Symbol(id, value, Mutability.VAR, Scope.LOCAL, currentIndex++));
    }

    public Symbol lookup(String id) throws UndefinedException {
	try {
	    return globalSyms.lookup(id);
	} catch (UndefinedException e) {
	    if (!symbols.containsKey(id)) {
		throw new UndefinedException(id + " was not defined");
	    }

	    return symbols.get(id);
	}
    }

    public int lookupFunctionIndex(String ident, int providedArgs) throws UndefinedException, WrongParametersException {
	return globalSyms.lookupFunctionIndex(ident, providedArgs);
    }

    public FunctionBase lookupFunction(int idx) {
	return globalSyms.lookupFunction(idx);
    }
}

class SymbolTable implements ILookup {
    Hashtable<String, Symbol> globalSymbols = new Hashtable<String, Symbol>();
    int currentIndex = 0;

    public ArrayList<FunctionBase> functions = new ArrayList<FunctionBase>();

    Hashtable<String, FunctionSymbolTable> functionSymbolTables =
	new Hashtable<String, FunctionSymbolTable>();

    public void checkMultipleDefinition(String id) throws MultipleDefinitionException
    {
	if (globalSymbols.containsKey(id)) {
	    throw new MultipleDefinitionException("redefinition of " + id);
	}
    }

    void addGlobalConstant(String id, int value) throws MultipleDefinitionException
    {
	checkMultipleDefinition(id);
	globalSymbols.put(id, new Symbol(id, value, Mutability.CONST, Scope.GLOBAL, -1));
    }

    void addFunction(FunctionBase fn) {
	functions.add(fn);
    }

    void addGlobalVariable(String id, int value) throws MultipleDefinitionException
    {
	checkMultipleDefinition(id);
	globalSymbols.put(id, new Symbol(id, value, Mutability.VAR, Scope.GLOBAL, currentIndex++));
    }

    public int lookupFunctionIndex(String ident, int providedArgs) throws UndefinedException, WrongParametersException {
	FunctionBase foundFn = null;

	int idx = 0;
	for (; idx < functions.size(); ++idx) {
	    FunctionBase fn = functions.get(idx);

	    if (fn.identifier.equals(ident)) {
		foundFn = fn;
		break;
	    }
	}
	
	if (foundFn == null) {
	    throw new UndefinedException(ident);
	}
	if (foundFn.numberOfArguments() != providedArgs) {
	    throw new WrongParametersException(foundFn.numberOfArguments(), providedArgs);
	}

	return idx;
    }

    public FunctionBase lookupFunction(int idx) {
	return functions.get(idx);
    }

    String lookupFunctionIdent(int index) {
	return functions.get(index).identifier;
    }

    public Symbol lookup(String id) throws UndefinedException {
	if (!globalSymbols.containsKey(id)) {
	    throw new UndefinedException(id + " was not defined");
	}

	return globalSymbols.get(id);
    }

    FunctionSymbolTable createFunctionTable(FunctionBase fn) throws MultipleDefinitionException {
	// if there's no table already, create one
	if (!functionSymbolTables.containsKey(fn.identifier)) {
	    functionSymbolTables.put(fn.identifier,
				     new FunctionSymbolTable(this, fn.identifier, 0));
							     //fn.numberOfArguments()));
	    addFunction(fn);
	}
	else {
	    // already defined
	    throw new MultipleDefinitionException(fn.identifier);
	}

	return functionSymbolTables.get(fn.identifier);
    }

    FunctionSymbolTable getFunctionTable(FunctionBase fn) throws UndefinedException {
	if (!functionSymbolTables.containsKey(fn.identifier)) {
	    throw new UndefinedException(fn.identifier);
	}

	return functionSymbolTables.get(fn.identifier);
    }
}

class Program {
    public ArrayList<GlobalConstDeclaration> constDeclarations;
    public ArrayList<GlobalVarDeclaration> varDeclarations;
    public ArrayList<Procedure> procedures;
    public ArrayList<Function> functions;

    public Stmt statement;

    Program(ArrayList<GlobalConstDeclaration> cdecls, 
	    ArrayList<GlobalVarDeclaration> vdecls,
	    ArrayList<Procedure> procs,
	    ArrayList<Function> fns,
	    Stmt s) {
	constDeclarations = cdecls;
	varDeclarations = vdecls;
	procedures = procs;
	functions = fns;
	statement = s;
    }

    public void addSymbols(SymbolTable table) throws MultipleDefinitionException {
	for (GlobalConstDeclaration cdecl : constDeclarations) {
	    cdecl.addSymbol(table);
	}
	for (GlobalVarDeclaration vdecl : varDeclarations) {
	    vdecl.addSymbol(table);
	}

	for (Procedure proc : procedures) {
	    proc.addSymbols(table.createFunctionTable(proc));
	}

	for (Function fn : functions) {
	    fn.addSymbols(table.createFunctionTable(fn));
	}
    }

    public ArrayList<Byte> compile(SymbolTable table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
	ArrayList<Byte> res = new ArrayList<Byte>();

	for (GlobalConstDeclaration cdecl : constDeclarations) {
	    res.addAll(cdecl.compile(table));
	}

	for (GlobalVarDeclaration vdecl : varDeclarations) {
	    res.addAll(vdecl.compile(table));
	}

	res.addAll(statement.compile(table));
	res.add((byte)177); // b1, simple return
	return res;
    }
}

class Parameter
{
    // parameters are always int, so no need to store a type
    String identifier;

    Parameter(String ident) {
	identifier = ident;
    }

    public void addSymbol(FunctionSymbolTable table) throws MultipleDefinitionException {
	table.addVariable(identifier, 0); // the 0 should be unused
    }
}

class RoutineBlock {
    ArrayList<ConstDeclaration> constDecls;
    ArrayList<VarDeclaration> varDecls;
    Stmt statement;

    RoutineBlock(ArrayList<ConstDeclaration> cdecls,
		 ArrayList<VarDeclaration> vdecls,
		 Stmt s) {
	constDecls = cdecls;
	varDecls = vdecls;
	statement = s;
    }

    public void addSymbols(FunctionSymbolTable table) throws MultipleDefinitionException {
 	for (ConstDeclaration cdecl : constDecls) {
	    cdecl.addSymbol(table);
	}

	for (VarDeclaration vdecl : varDecls) {
	    vdecl.addSymbol(table);
	}
    }

    public ArrayList<Byte> compile(ILookup syms) throws UndefinedException, LWertException, WrongParametersException, RWertException {
	ArrayList<Byte> code = new ArrayList<Byte>();

	for (ConstDeclaration cdecl : constDecls) {
	    code.addAll(cdecl.compile(syms));
	}

	for (VarDeclaration vdecl : varDecls) {
	    code.addAll(vdecl.compile(syms));
	}

	code.addAll(statement.compile(syms));
	return code;
    }
}

// acts as a base for both procedure and function
class FunctionBase {
    public String identifier;
    ArrayList<Parameter> params;
    RoutineBlock routine;

    FunctionBase(String ident,
		 ArrayList<Parameter> par,
		 RoutineBlock r) {
	identifier = ident;
	params = par;
	routine = r;
    }

    int numberOfArguments() {
	return params.size();
    }

    public void addSymbols(FunctionSymbolTable table) throws MultipleDefinitionException {
	for (Parameter param : params) {
	    param.addSymbol(table);
	}

	routine.addSymbols(table);
    }
}

class Procedure extends FunctionBase {
    Procedure(String ident,
	      ArrayList<Parameter> par,
	      RoutineBlock r) {
	super(ident, par, r);
    }

    public ArrayList<Byte> compile(FunctionSymbolTable table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
	ArrayList<Byte> code = super.routine.compile(table);
	code.add((byte) 177);
	return code;
    }
}

class Function extends FunctionBase {
    Expr resultExpression;
    
    Function(String ident,
	     ArrayList<Parameter> par,
	     RoutineBlock r,
	     Expr res) {
	super(ident, par, r);
	resultExpression = res;
    }

    public ArrayList<Byte> compile(FunctionSymbolTable table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
	ArrayList<Byte> code = super.routine.compile(table);
	code.addAll(resultExpression.compile(table));
	code.add((byte) 172); // ireturn, 0xac, return with value from stack
	return code;
    }
}

class CallExpr implements Expr {
    String identifier;
    ArrayList<Expr> arguments;

    CallExpr(String ident, ArrayList<Expr> args) {
	identifier = ident;
	arguments = args;
    }

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
	ArrayList<Byte> code = new ArrayList<Byte>();

	for (Expr e : arguments) {
	    code.addAll(e.compile(table));
	}
	
	// push the expressions onto the stack and then invoke the function
	code.add((byte) 184); // invoke static
	int fnIdx = table.lookupFunctionIndex(identifier, arguments.size());
	FunctionBase fnObj = table.lookupFunction(fnIdx);

	if (fnObj instanceof Procedure) {
	    throw new RWertException(fnObj.identifier);
	}
	    
	byte upper_byte = (byte) (fnIdx >> 8);
	byte lower_byte = (byte) (fnIdx & 0xFF);
	code.add(upper_byte);
	code.add(lower_byte);
	
	return code;
    }
}

class ConstDeclaration {
    String identifier;
    int value;

    ConstDeclaration(String ident, int v) {
	identifier = ident;
	value = v;
    }

    ConstDeclaration(String ident, String v) {
	this(ident, Integer.parseInt(v));
    }

    public void addSymbol(FunctionSymbolTable table) throws MultipleDefinitionException {
	table.addConstant(identifier, value);
    }

    public ArrayList<Byte> compile(ILookup table) {
	    
	return new ArrayList<Byte>();
    }
}

class GlobalConstDeclaration {
    String identifier;
    int value;

    GlobalConstDeclaration(String ident, int v) {
	identifier = ident;
	value = v;
    }

    GlobalConstDeclaration(String ident, String v) {
	this(ident, Integer.parseInt(v));
    }

    public void addSymbol(SymbolTable table) throws MultipleDefinitionException {
	table.addGlobalConstant(identifier, value);
    }

    public ArrayList<Byte> compile(SymbolTable table) {
	// nothing to store into memory, all constants get bipushed
	return new ArrayList<Byte>();
    }
}

class VarDeclaration {
	String identifier;
	int value;

	VarDeclaration(String ident, int v) {
		identifier = ident;
		value = v;
	}

	VarDeclaration(String ident, String v) {
		this(ident, Integer.parseInt(v));
	}

	public void addSymbol(FunctionSymbolTable table) throws MultipleDefinitionException {
		table.addVariable(identifier, value);
	}

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException {
		Symbol sym = table.lookup(identifier);
		ArrayList<Byte> res = new ArrayList<Byte>();
		res.add((byte)16); // 0x10, bipush
		res.add((byte)sym.value); // the value to push
		res.add((byte)54); // 0x36, istore
		res.add((byte)sym.index); // the index we're storing this value at

		return res;
	}
}

class GlobalVarDeclaration {
    String identifier;
    int value;

    GlobalVarDeclaration(String ident, int v) {
	identifier = ident;
	value = v;
    }

    GlobalVarDeclaration(String ident, String v) {
	this(ident, Integer.parseInt(v));
    }

    public void addSymbol(SymbolTable table) throws MultipleDefinitionException {
	table.addGlobalVariable(identifier, value);
    }

    public ArrayList<Byte> compile(SymbolTable table) throws UndefinedException {
	Symbol sym = table.lookup(identifier);
	ArrayList<Byte> res = new ArrayList<Byte>();
	res.add((byte)16); // 0x10, bipush
	res.add((byte)sym.value); // the value to push
	res.add((byte)179); // 0xb3, putstatic
	
	short staticIndex = (short)sym.index; // get the index to put it into
	byte upper_index = (byte)(staticIndex >> 8);
	byte lower_index = (byte)(staticIndex & 0xFF);

	res.add(upper_index);
	res.add(lower_index);

	return res;
    }
}

//public class Symbolizer implements 

interface Expr {
    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException;
}

class Literal implements Expr {
	int value;

	Literal(int v) { value = v; }
	Literal(String lit) { this(Integer.parseInt(lit)); }

	public ArrayList<Byte> compile(ILookup table) {
		ArrayList<Byte> res = new ArrayList<Byte>();
		res.add((byte)16); // 0x10, bipush
		res.add((byte)value); // push this value onto stack

		return res;
	}
}

class IdentExpr implements Expr {
	String name;

	IdentExpr(String n) { name = n; }

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
		Symbol sym = table.lookup(name);

		return sym.loadInstructions();
	}
}

enum BinaryOp {
	ADD,
	SUB,
	MUL,
	DIV
}

class BinaryExpr implements Expr {
	BinaryOp operation;
	Expr left_operand;
	Expr right_operand;

	BinaryExpr(String o, Expr left, Expr right) {
		switch(o) {
			case "+":
				operation = BinaryOp.ADD;
				break;
			case "-":
				operation = BinaryOp.SUB;
				break;
			case "*":
				operation = BinaryOp.MUL;
				break;
			case "/":
				operation = BinaryOp.DIV;
				break;
			default:
				throw new IllegalArgumentException();
		}

		left_operand = left;
		right_operand = right;
	}

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
		// push the two expressions onto the stack by executing them
		ArrayList<Byte> res = left_operand.compile(table);
		res.addAll(right_operand.compile(table));
		
		// execute the appropriate operator
		switch(operation) {
			case ADD:
				res.add((byte)96); // 0x60, iadd
				break;
			case SUB:
				res.add((byte)100); // 0x64, isub
				break;
			case MUL:
				res.add((byte)104); // 0x68, imul
				break;
			case DIV:
				res.add((byte)108); // 0x6c, idiv
				break;
		}

		return res;
	}
}


enum CompareOp {
	LT,
	LTE,
	GT,
	GTE,
	EQ,
	NEQ
}

class ComparisonExpr implements Expr {
	public CompareOp operation;
	Expr left_operand;
	Expr right_operand;

	ComparisonExpr(String op, Expr left, Expr right)
	{
		switch(op) {
			case "<":
				operation = CompareOp.LT;
				break;
			case "<=":
				operation = CompareOp.LTE;
				break;
			case ">":
				operation = CompareOp.GT;
				break;
			case ">=":
				operation = CompareOp.GTE;
				break;
			case "==":
				operation = CompareOp.EQ;
				break;
			case "!=":
				operation = CompareOp.NEQ;
				break;
			default:
				throw new IllegalArgumentException();
		}

		left_operand = left;
		right_operand = right;
	}

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
		ArrayList<Byte> res = new ArrayList<Byte>();

		// push the 2 expressions on the stack and then 
		// execute the appropriate comparison operation,
		// leaving the result of the comparison behind on the stack

		res.addAll(left_operand.compile(table));
		res.addAll(right_operand.compile(table));
		
		// do nothing with operation, this will get lifted
		// into the enclosing if or while statement.
		return res;
	}
}

interface Stmt {
    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException;
}

class CompoundStmt implements Stmt {
	ArrayList<Stmt> statements = new ArrayList<Stmt>();

	public void add(Stmt s) {
		statements.add(s);
	}

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
		ArrayList<Byte> res = new ArrayList<Byte>();
		
		for (Stmt s : statements) {
			res.addAll(s.compile(table));
		}

		return res;
	}
}

class BlockStmt implements Stmt {
	CompoundStmt statements;

	BlockStmt(CompoundStmt cs) {
		statements = cs;
	}

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
		return statements.compile(table);
	}
}

class AssignStmt implements Stmt {
    String identifier;
    Expr expression;

    AssignStmt(String ident, Expr e) {
	identifier = ident;
	expression = e;
    }

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
	Symbol sym = table.lookup(identifier);

	ArrayList<Byte> code = expression.compile(table);
	code.addAll(sym.storeInstructions());
	return code;
    }
}

class IfStmt implements Stmt {
	ComparisonExpr condition;
	Stmt true_case;
	Stmt false_case;

	IfStmt(ComparisonExpr comp, Stmt tr, Stmt fa) {
		condition = comp;
		true_case = tr;
		false_case = fa;
	}

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
		ArrayList<Byte> condCode = condition.compile(table);
		ArrayList<Byte> true_code = true_case.compile(table);
		ArrayList<Byte> false_code = null;
		if (false_case != null)
		{
			false_code = false_case.compile(table);
		}

		// lift the condition from CompareExpr into this function
		CompareOp op = condition.operation;

		switch(op) {
			case LT:
				condCode.add((byte) 162); // GTE, a2
				break;
			case GT:
				condCode.add((byte) 164); // LTE, a4
				break;
			case LTE:
				condCode.add((byte) 163); // GT, a3
				break;
			case GTE:
				condCode.add((byte) 161); // LT, a1
				break;
			case EQ:
				condCode.add((byte) 160); // NEQ, a0
				break;
			case NEQ:
				condCode.add((byte) 159); // EQ, 9f
				break;
		}

		// jump (true.size() + 3 forward + (3 (jmp codes))

		short offset = (short)(true_code.size() + 3);
		if (false_case != null) {
			offset += 3;
		}
		byte upper_byte = (byte)(offset >> 8);
		byte lower_byte = (byte)(offset & 0xFF);
		condCode.add(upper_byte);
		condCode.add(lower_byte);
		condCode.addAll(true_code);

		if (false_case != null) {
			condCode.add((byte)167); // jump past else block
			offset = (short)(false_code.size() + 3);
			upper_byte = (byte)(offset >> 8);
			lower_byte = (byte)(offset & 0xFF);
			condCode.add(upper_byte);
			condCode.add(lower_byte);
			condCode.addAll(false_code);
		}

		return condCode;
	}
}


class WhileStmt implements Stmt {
  ComparisonExpr condition;
  Stmt statement;

  WhileStmt(ComparisonExpr comp, Stmt s) {
    condition = comp;
    statement = s;
  }

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
    ArrayList<Byte> conditionBC = condition.compile(table);
    ArrayList<Byte> statementBC = statement.compile(table);

	CompareOp op = condition.operation;

	switch(op) {
		case LT:
			conditionBC.add((byte) 162); // GTE, a2
			break;
		case GT:
			conditionBC.add((byte) 164); // LTE, a4
			break;
		case LTE:
			conditionBC.add((byte) 163); // GT, a3
			break;
		case GTE:
			conditionBC.add((byte) 161); // LT, a1
			break;
		case EQ:
			conditionBC.add((byte) 160); // NEQ, a0
			break;
		case NEQ:
			conditionBC.add((byte) 159); // EQ, 9f
			break;
	}

    // bis nach dem folgenden statement und den jump zuruck zum anfang
    short offset = (short)(statementBC.size() + 6); // goto am ende ist 3 bytes
    byte upper_byte = (byte) (offset >> 8);
    byte lower_byte = (byte) (offset & 0xFF);

    conditionBC.add(upper_byte);
    conditionBC.add(lower_byte);
    conditionBC.addAll(statementBC);

    offset = (short)-(conditionBC.size()); // the offset to jump back
    conditionBC.add((byte)167);                      // a7, goto, spring zum anfang

    upper_byte = (byte)(offset >> 8);
    lower_byte = (byte)(offset & 0xFF);

    conditionBC.add(upper_byte);
    conditionBC.add(lower_byte);

    return conditionBC;
  }
}

class PrintStmt implements Stmt {
	Expr expression;

	PrintStmt(Expr e) {
		expression = e;
	}

    public ArrayList<Byte> compile(ILookup table) throws UndefinedException, LWertException, WrongParametersException, RWertException {
		ArrayList<Byte> res = expression.compile(table);
		res.add((byte) 184);
		int printIdx = table.lookupFunctionIndex("print", 1);
		byte upper_byte = (byte) (printIdx >> 8);
		byte lower_byte = (byte) (printIdx & 0xFF);
		res.add(upper_byte);
		res.add(lower_byte); // index of print function, will be replaced later
		return res;
	}
}

PARSER_END(Parser)

SKIP: {
	" "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN: {
    <LPAREN: "(">
  | <RPAREN: ")">
  | <OP_ADD_SUB: "+" | "-">
  | <OP_MUL_DIV: "*" | "/">
  | <OP_COMPARE: "<" | ">" | "<=" | ">=" | "==" | "!=">
  | <OP_ASSIGN: "=">

  | <WHILE: "while">
  | <IF: "if">
  | <ELSE: "else">
  | <INT: "int">
  | <FINAL: "final">
  | <PRINT: "print">

  | <FUNC: "func">
  | <VOID: "void">
  | <RETURN: "return">

  | <NUMBER: "0" | (["1"-"9"](["0"-"9"])*)>
  | <#DIGIT: ["0"-"9"]>
  | <#LOWER_LETTER: ["a"-"z"]>
  | <#UPPER_LETTER: ["A"-"Z"]>
  | <#LETTER: <LOWER_LETTER> | <UPPER_LETTER>>
  | <#ALPHANUM: <DIGIT> | <LETTER>>
  | <IDENT: <LOWER_LETTER> (<ALPHANUM>)*>
}

Program parse():
{
    ArrayList<GlobalConstDeclaration> cds = new ArrayList<GlobalConstDeclaration>();
    ArrayList<GlobalVarDeclaration> vds = new ArrayList<GlobalVarDeclaration>();
    ArrayList<Procedure> procs = new ArrayList<Procedure>();
    ArrayList<Function> funcs = new ArrayList<Function>();
    Stmt s;
}
{
    (cds=globalConstDecls() vds=globalVarDecls() procs=procedureDecls() funcs=functionDecls() s=statement() {
	return new Program(cds, vds, procs, funcs, s);
    })
}

ArrayList<Procedure> procedureDecls():
{
    Procedure proc;
    ArrayList<Procedure> procs = new ArrayList<Procedure>();
}
{
    (proc=procedure() {
	procs.add(proc);
    })* {
	return procs;
    }
}

ArrayList<Function> functionDecls():
{
    Function fn;
    ArrayList<Function> fns = new ArrayList<Function>();
}
{
    (fn=function() {
	fns.add(fn);
    })* {
	return fns;
    }
}

ArrayList<ConstDeclaration> constDecls():
{
    Token ident;
    Token number;
    ArrayList<ConstDeclaration> cds = new ArrayList<ConstDeclaration>();
}
{
    (<FINAL> <INT>
     ident=<IDENT> <OP_ASSIGN> number=<NUMBER>
	{
	    cds.add(new ConstDeclaration(ident.image, number.image));
	}
     ("," ident=<IDENT> <OP_ASSIGN> number=<NUMBER>
	 {
	     cds.add(new ConstDeclaration(ident.image, number.image));
	 }
      )* ";")? {
	return cds;
    }
}

ArrayList<GlobalConstDeclaration> globalConstDecls():
{
    Token ident;
    Token number;
    ArrayList<GlobalConstDeclaration> gcds = new ArrayList<GlobalConstDeclaration>();
}
{
    (<FINAL> <INT>
     ident=<IDENT> <OP_ASSIGN> number=<NUMBER> {
	gcds.add(new GlobalConstDeclaration(ident.image, number.image));
    }
     ("," ident=<IDENT> <OP_ASSIGN> number=<NUMBER> {
	 gcds.add(new GlobalConstDeclaration(ident.image, number.image));
     })* ";")? {
	return gcds;
    }
}

ArrayList<VarDeclaration> varDecls():
{
    Token ident;
    Token number = null;
    ArrayList<VarDeclaration> vds = new ArrayList<VarDeclaration>();
}
{
	(<INT> 
	 ident=<IDENT> (<OP_ASSIGN> number=<NUMBER>)?
	    {
		if (number != null) {
		    vds.add(new VarDeclaration(ident.image, number.image));
		}
		else
		    {
			vds.add(new VarDeclaration(ident.image, number.image));
		    }
		number = null; // reset to null because this could be unused
	    }
	 ("," ident=<IDENT> (<OP_ASSIGN> number=<NUMBER>)? {
	     if (number != null) {
		 vds.add(new VarDeclaration(ident.image, number.image));
	     }
	     else {
		 vds.add(new VarDeclaration(ident.image, 0));
	     }
	     number = null;
	 })* ";"
	 )?
	    {
		return vds;
	    }
}

ArrayList<GlobalVarDeclaration> globalVarDecls():
{
    Token ident;
    Token number = null;
    ArrayList<GlobalVarDeclaration> gvds = new ArrayList<GlobalVarDeclaration>();
}
{
    (<INT> ident=<IDENT> (<OP_ASSIGN> number=<NUMBER>)? {
	if (number != null) {
	    gvds.add(new GlobalVarDeclaration(ident.image, number.image));
	} else {
	    gvds.add(new GlobalVarDeclaration(ident.image, 0));
	}
	number = null;
    }
	("," ident=<IDENT> (<OP_ASSIGN> number=<NUMBER>)? {
	    if (number != null) {
		gvds.add(new GlobalVarDeclaration(ident.image, number.image));
	    }
	    else {
		gvds.add(new GlobalVarDeclaration(ident.image, 0));
	    }
	    number = null;
	})* ";")? {
	return gvds;
    }
}

Expr expression():
{
	Expr e;
}
{
	(e=sum() {
		return e;
	})
}

Expr sum():
{
	Token op;
	Expr e1;
	Expr e2;
}
{
	(e1=product() (op=<OP_ADD_SUB> e2=product() {
		e1 = new BinaryExpr(op.image, e1, e2);
	})* {
		return e1;
	})
}

Expr product():
{
	Token op;
	Expr e1;
	Expr e2;
}
{
	(e1=term() (op=<OP_MUL_DIV> e2=term() {
		e1 = new BinaryExpr(op.image, e1, e2);
	})* {
		return e1;
	})
}


Expr term():
{
	Token ident;
	Token num;
	Expr e;
	ArrayList<Expr> args;
}
{
    (num=<NUMBER> {
	return new Literal(num.image);
    })
	| (ident=<IDENT> (args=functionCall() {
		    return new CallExpr(ident.image, args);
		})? {
		return new IdentExpr(ident.image);
	    })
	| ("(" e=expression() ")" {
		return e;
	    })
}

ComparisonExpr condition():
{
	Expr e1;
	Expr e2;
	Token op;
}
{
	(e1=expression() op=<OP_COMPARE> e2=expression() {
		return new ComparisonExpr(op.image, e1, e2);
	})
}

Stmt statement():
{
	Expr e;
	Stmt s;
	Token ident;
}
{
    (ident=<IDENT> (e=assignStatement() { 
		return new AssignStmt(ident.image, e); 
	}) | functionCall())
  | (s=whileStatement() { return s; })
  | (s=printStatement() { return s; })
  | (s=ifStatement() { return s; })
  | ("{" s=compoundStatement() "}" { return s; })
}

Expr assignStatement():
{
	Expr e;
}
{
	(<OP_ASSIGN> e=expression() ";" {
		return e;
	})
}

WhileStmt whileStatement():
{
	ComparisonExpr cond;
	Stmt s;
}
{
	(<WHILE> cond=condition() s=statement() {
		return new WhileStmt(cond, s);
	})
}

PrintStmt printStatement():
{
	Expr e;
}
{
	(<PRINT> "(" e=expression() ")" ";" {
		return new PrintStmt(e);
	})
}

IfStmt ifStatement():
{
	ComparisonExpr cond;
	Stmt true_statement;
	Stmt false_statement;
}
{
	(<IF> cond=condition() true_statement=statement() false_statement=optElse() {
		return new IfStmt(cond, true_statement, false_statement);
	})
}

CompoundStmt compoundStatement():
{
	Stmt s;
	CompoundStmt cs = new CompoundStmt();
}
{
	(s = statement() {
		cs.add(s);
	})*
	{
		return cs;
	}
}

Stmt optElse():
{
	Stmt s = null;
}
{
	(<ELSE> s=statement())?
	{
		return s;
	}
}

// the parentheses after an identifier suggest we want to call it
ArrayList<Expr> functionCall():
{
    Expr e;
    ArrayList<Expr> args = new ArrayList<Expr>();
}
{
    ("(" (e=expression() {
	args.add(e);
    } ("," e=expression() {
	    args.add(e);
	})*)? ")" {
	return args;
    })
}

Function function():
{
    Token ident;
    ArrayList<Parameter> params = new ArrayList<Parameter>();
    RoutineBlock rb;
    Expr e;
}
{
    (<FUNC> ident=<IDENT> "(" (params=parameters())? ")" "{" 
     rb=routineBlock() 
     <RETURN> "(" e=expression() ")" ";"
     "}" {
	return new Function(ident.image, params, rb, e);
    })
}

Procedure procedure():
{
    Token ident;
    ArrayList<Parameter> params = new ArrayList<Parameter>();
    RoutineBlock rb;
}
{
    (<VOID> ident=<IDENT> "(" (params=parameters())? ")" "{" rb=routineBlock() <RETURN> ";" "}" {
	return new Procedure(ident.image, params, rb);
    })
}

ArrayList<Parameter> parameters():
{
    Token ident;
    ArrayList<Parameter> params = new ArrayList<Parameter>();
}
{
    (<INT> ident=<IDENT> {
	params.add(new Parameter(ident.image));
    } ("," <INT> ident=<IDENT> {
	    params.add(new Parameter(ident.image));
	})* {
	return params;
    })
}

RoutineBlock routineBlock():
{
    ArrayList<ConstDeclaration> cdecls;
    ArrayList<VarDeclaration> vdecls;
    Stmt s;
}
{
    (cdecls=constDecls() vdecls=varDecls() s=statement() {
	return new RoutineBlock(cdecls, vdecls, s);
    })
}
